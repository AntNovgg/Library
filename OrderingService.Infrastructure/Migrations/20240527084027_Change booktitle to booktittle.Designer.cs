// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using OrderingService.Infrastructure;

#nullable disable

namespace OrderingService.Infrastructure.Migrations
{
    [DbContext(typeof(OrderingServiceContext))]
    [Migration("20240527084027_Change booktitle to booktittle")]
    partial class Changebooktitletobooktittle
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("OrderingService.Domain.Aggregates.OrderAggregate.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("ActualReturnDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("BookAuthor")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<Guid>("BookId")
                        .HasColumnType("uuid");

                    b.Property<string>("BookTittle")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<DateTimeOffset>("OrderDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("OrderStatus")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("PlannedReturnDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("RenterId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RenterId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("OrderingService.Domain.Aggregates.RenterAggregate.Renter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Telephone")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.HasKey("Id");

                    b.ToTable("Renters");
                });

            modelBuilder.Entity("OrderingService.Domain.Aggregates.OrderAggregate.Order", b =>
                {
                    b.HasOne("OrderingService.Domain.Aggregates.RenterAggregate.Renter", "Renter")
                        .WithMany()
                        .HasForeignKey("RenterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Renter");
                });

            modelBuilder.Entity("OrderingService.Domain.Aggregates.RenterAggregate.Renter", b =>
                {
                    b.OwnsOne("OrderingService.Domain.Aggregates.RenterAggregate.Address", "RenterAddress", b1 =>
                        {
                            b1.Property<Guid>("RenterId")
                                .HasColumnType("uuid");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("State")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("ZipCode")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("RenterId");

                            b1.ToTable("Renters");

                            b1.WithOwner()
                                .HasForeignKey("RenterId");
                        });

                    b.OwnsOne("OrderingService.Domain.Aggregates.RenterAggregate.FullName", "RenterFullName", b1 =>
                        {
                            b1.Property<Guid>("RenterId")
                                .HasColumnType("uuid");

                            b1.Property<string>("LastName")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("MiddleName")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("RenterId");

                            b1.ToTable("Renters");

                            b1.WithOwner()
                                .HasForeignKey("RenterId");
                        });

                    b.Navigation("RenterAddress")
                        .IsRequired();

                    b.Navigation("RenterFullName")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
